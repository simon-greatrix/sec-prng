STRONG_ALGORITHM=Algorithm used by SecureRandom.getInstanceStrong()
FREE_MEMORY_ENTROPY_ENABLED=The reported number of free bytes in the JVM's memory is taken as entropy.<br>Should this information be collected?
FREE_MEMORY_ENTROPY_DELAY=The reported number of free bytes in the JVM's memory is taken as entropy.<br>How long in milliseconds should the collector wait \
  between each sample?
GARBAGE_COLLECTOR_ENTROPY_ENABLED=Use the number of garbage collections and the amount of time this has taken is used as a source of entropy.<br>Should this\
  \ information be collected?
GARBAGE_COLLECTOR_ENTROPY_DELAY=Use the number of garbage collections and the amount of time this has taken is used as a source of entropy.<br>How long \
  should the collector wait between each sample?
SCHEDULING_ENTROPY_ENABLED=Variation in the actual number of nanoseconds between regular events is taken as entropy.<br>Should this information be collected?
SCHEDULING_ENTROPY_DELAY=Variation in the actual number of nanoseconds between regular events is taken as entropy.<br>How long in milliseconds should the \
  collector wait between each sample?
THREAD_TIME_ENTROPY_ENABLED=The amount of user and CPU time accumulated by existing threads is taken as a source of entropy.<br>Should this information be \
  collected?
THREAD_TIME_ENTROPY_DELAY=The amount of user and CPU time accumulated by existing threads is taken as a source of entropy.<br>How long in milliseconds should\
  \ the collector wait between each sample?
AWT_ENTROPY_ENABLED=The SHA-256 of the pixels of random areas of the screen are taken as a source of entropy.<br>Should this information be collected?
AWT_ENTROPY_DELAY=The SHA-256 of the pixels of random areas of the screen are taken as a source of entropy.<br>How long in milliseconds should the collector \
  wait between each sample?
AWT_ENTROPY_WIDTH=The SHA-256 of the pixels of random areas of the screen are taken as a source of entropy.<br>How many pixels wide should each individual \
  sample area be?
AWT_ENTROPY_HEIGHT=The SHA-256 of the pixels of random areas of the screen are taken as a source of entropy.<br>How many pixels high should each individual \
  sample area be?
HEAP_ENTROPY_ENABLED=The identity hash code of a newly allocated object is taken as a source of entropy.<br>Should this information be collected?
HEAP_ENTROPY_DELAY=The identity hash code of a newly allocated object is taken as a source of entropy.<br>How long in milliseconds should the collector wait \
  between each sample?
COLLECTOR_SLOW_DOWN=If no entropy is being used up by the PRNGs, collection will slow down to remove load from the system. Slow down will begin after this \
  duration has passed with no entropy requested. After this duration has passed twice collection will be half the speed. After this duration has passed three\
  \ times, it will be one third the speed, and so on.
NETWORK_EXPECTED_USAGE=Expected number of times each 128-byte block of network entropy will be used in sourcing 16-byte entropy blocks. This is not the \
  actual number of times a block will be used, only the average.
NETWORK_CONNECTION_TIMEOUT=The amount of time to await for a connection to a network source to be established.
NETWORK_READ_TIMEOUT=The amount of time to await for a network source to return some data.
NETWORK_SEEDS_USED=The number of seeds injected into the entropy pool upon each application start-up.
NETWORK_HOTBITS_WEIGHT=The Fourmilab Hot Bits service generates entropy by monitoring the decay of a Krypton-85 sample. How often should this source be used \
  compared to the others? Higher values mean a source is used more often.
NETWORK_QUANTUM_WEIGHT=The Australian National University's service generates entropy by monitoring quantum vacuum fluctuations. How often should this source\
  \ be used compared to the others? Higher values mean a source is used more often.
NETWORK_RANDOMDOTORG_WEIGHT=The random.org service generates entropy from wireless interference. How often should this source be used compared to the others?\
  \ Higher values mean a source is used more often.
NETWORK_RANDOMDOTORG_API_KEY=The random.org service requires an API key. If you need more seed information, you may need a different API key.
SEED_STORAGE_CLASS=How seed data is stored\: in a file, in system preferences, or in user preferences.
SEED_STORAGE_PERIOD=How often seed data is written out to storage. Seed data is always written out on application shutdown.
SEED_STORAGE_PERIOD_ADD=An optional increase in the time between seed data writes. If the initial period was 5 seconds and this was set to 2 seconds, \
  writes would be separated by 5s, 7s, 9s, 11s and so on.
SEED_STORAGE_PERIOD_MULTIPLIER=An optional multiplicative increase in the time between data writes. If the initial period was 5 seconds and this was set to \
  2, writes would be separated by 5s, 10s, 20s, 40s and so on.
SEED_STORAGE_PERIOD_MAX=An optional maximum time between seed storage writes.
SEED_STORAGE_FILE=The file where seed data is stored if file storage is selected.
PREFS_ENABLE_USER=Load configuration from local user preferences? The configurator tool can be used to set these preferences.
PREFS_ENABLE_SYSTEM=Load configuration from local system preferences? Access to system preferences normally requires administrator privileges which is rarely\
  \ available. The configurator tool can be used to set these preferences.
